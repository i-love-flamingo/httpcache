// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewTagSupporting creates a new instance of TagSupporting. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagSupporting(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagSupporting {
	mock := &TagSupporting{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TagSupporting is an autogenerated mock type for the TagSupporting type
type TagSupporting struct {
	mock.Mock
}

type TagSupporting_Expecter struct {
	mock *mock.Mock
}

func (_m *TagSupporting) EXPECT() *TagSupporting_Expecter {
	return &TagSupporting_Expecter{mock: &_m.Mock}
}

// PurgeTags provides a mock function for the type TagSupporting
func (_mock *TagSupporting) PurgeTags(tags []string) error {
	ret := _mock.Called(tags)

	if len(ret) == 0 {
		panic("no return value specified for PurgeTags")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string) error); ok {
		r0 = returnFunc(tags)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TagSupporting_PurgeTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeTags'
type TagSupporting_PurgeTags_Call struct {
	*mock.Call
}

// PurgeTags is a helper method to define mock.On call
//   - tags []string
func (_e *TagSupporting_Expecter) PurgeTags(tags interface{}) *TagSupporting_PurgeTags_Call {
	return &TagSupporting_PurgeTags_Call{Call: _e.mock.On("PurgeTags", tags)}
}

func (_c *TagSupporting_PurgeTags_Call) Run(run func(tags []string)) *TagSupporting_PurgeTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TagSupporting_PurgeTags_Call) Return(err error) *TagSupporting_PurgeTags_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TagSupporting_PurgeTags_Call) RunAndReturn(run func(tags []string) error) *TagSupporting_PurgeTags_Call {
	_c.Call.Return(run)
	return _c
}
