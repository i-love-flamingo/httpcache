// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import httpcache "flamingo.me/httpcache"
import mock "github.com/stretchr/testify/mock"

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Flush provides a mock function with given fields:
func (_m *Backend) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *Backend) Get(key string) (httpcache.Entry, bool) {
	ret := _m.Called(key)

	var r0 httpcache.Entry
	if rf, ok := ret.Get(0).(func(string) httpcache.Entry); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(httpcache.Entry)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: key
func (_m *Backend) Purge(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, entry
func (_m *Backend) Set(key string, entry httpcache.Entry) error {
	ret := _m.Called(key, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, httpcache.Entry) error); ok {
		r0 = rf(key, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
